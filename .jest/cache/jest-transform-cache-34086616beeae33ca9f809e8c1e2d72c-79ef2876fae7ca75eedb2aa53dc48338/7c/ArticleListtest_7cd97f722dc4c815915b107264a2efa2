cb6652f4c3b690f66f04af5d336382f3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _ArticleList = _interopRequireDefault(require("./ArticleList"));
var _jsxRuntime = require("react/jsx-runtime");
var mockData = [{
  exhaustive: {
    nbHits: false,
    typo: false
  },
  exhaustiveNbHits: false,
  exhaustiveTypo: false,
  hits: [{
    _highlightResult: {
      author: {
        matchLevel: 'none',
        matchedWords: [],
        value: 'evanjrowley'
      },
      comment_text: {
        fullyHighlighted: false,
        matchLevel: 'full',
        matchedWords: ['mobile'],
        value: "I went though a similar problem about 10 years ago. In my case, the phone (iPhone 4S) wasn't lost, but it's clock was perpetually off. The WiFi radio had failed and the Stratum 1 time server on my <em>mobile</em> network seemed to be sending it the wrong time. This resulted in all of the MFA TOTPs getting rejected and me not being able to access Gmail for a year. Despite the clock issue, many things still worked, presumably because this was still back when much of the internet used either weak or zero TLS/SSL."
      },
      story_title: {
        matchLevel: 'none',
        matchedWords: [],
        value: 'Never enable 2FA for accounts that you actually care about (2023)'
      },
      story_url: {
        matchLevel: 'none',
        matchedWords: [],
        value: 'https://benwilber.github.io/2023/07/17/never-enable-2fa-for-accounts-you-actually-care-about.html'
      }
    },
    _tags: ['comment', 'author_evanjrowley', 'story_41316029'],
    author: 'evanjrowley',
    comment_text: 'I went though a similar problem about 10 years ago. In my case, the phone (iPhone 4S) wasn&#x27;t lost, but it&#x27;s clock was perpetually off. The WiFi radio had failed and the Stratum 1 time server on my mobile network seemed to be sending it the wrong time. This resulted in all of the MFA TOTPs getting rejected and me not being able to access Gmail for a year. Despite the clock issue, many things still worked, presumably because this was still back when much of the internet used either weak or zero TLS&#x2F;SSL.',
    created_at: '2024-08-22T02:14:57Z',
    created_at_i: 1724292897,
    objectID: '41316141',
    parent_id: 41316029,
    story_id: 41316029,
    story_title: 'Never enable 2FA for accounts that you actually care about (2023)',
    story_url: 'https://benwilber.github.io/2023/07/17/never-enable-2fa-for-accounts-you-actually-care-about.html',
    updated_at: '2024-08-22T02:35:33Z'
  }],
  hitsPerPage: 20,
  nbHits: 325262,
  nbPages: 50,
  page: 0,
  params: 'query=mobile&advancedSyntax=true&analyticsTags=backend',
  processingTimeMS: 15,
  processingTimingsMS: {},
  query: 'mobile',
  serverTimeMS: 17
}];
var mockOnRefresh = jest.fn(function () {
  return Promise.resolve();
});
describe('ArticleList Component', function () {
  it('renders correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ArticleList.default, {
        data: mockData,
        onRefresh: mockOnRefresh
      })),
      getByText = _render.getByText;
    expect(getByText('Never enable 2FA for accounts that you actually care about (2023)')).toBeTruthy();
  });
  it('handles refresh', (0, _asyncToGenerator2.default)(function* () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_ArticleList.default, {
        data: mockData,
        onRefresh: mockOnRefresh
      })),
      getByTestId = _render2.getByTestId;
    (0, _reactNative.fireEvent)(getByTestId('flatlist'), 'onRefresh');
    yield (0, _reactNative.waitFor)(function () {
      return expect(mockOnRefresh).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,