3f7301615930df02b135ee5c3a1dd635
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
module.exports = function (moduleName, instanceMethods, isESModule) {
  var _Class;
  var RealComponent = isESModule ? jest.requireActual(moduleName).default : jest.requireActual(moduleName);
  var React = require('react');
  var SuperClass = typeof RealComponent === 'function' ? RealComponent : React.Component;
  var name = RealComponent.displayName || RealComponent.name || (RealComponent.render ? RealComponent.render.displayName || RealComponent.render.name : 'Unknown');
  var nameWithoutPrefix = name.replace(/^(RCT|RK)/, '');
  var Component = (_Class = function (_SuperClass) {
    function Component() {
      (0, _classCallCheck2.default)(this, Component);
      return _callSuper(this, Component, arguments);
    }
    (0, _inherits2.default)(Component, _SuperClass);
    return (0, _createClass2.default)(Component, [{
      key: "render",
      value: function render() {
        var _this = this;
        var props = Object.assign({}, RealComponent.defaultProps);
        if (this.props) {
          Object.keys(this.props).forEach(function (prop) {
            if (_this.props[prop] !== undefined) {
              props[prop] = _this.props[prop];
            }
          });
        }
        return React.createElement(nameWithoutPrefix, props, this.props.children);
      }
    }]);
  }(SuperClass), _Class.displayName = 'Component', _Class);
  Object.defineProperty(Component, 'name', {
    value: name,
    writable: false,
    enumerable: false,
    configurable: true
  });
  Component.displayName = nameWithoutPrefix;
  Object.keys(RealComponent).forEach(function (classStatic) {
    Component[classStatic] = RealComponent[classStatic];
  });
  if (instanceMethods != null) {
    Object.assign(Component.prototype, instanceMethods);
  }
  return Component;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9pbmhlcml0czIiLCJfY2FsbFN1cGVyIiwidCIsIm8iLCJlIiwiZGVmYXVsdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3IiLCJhcHBseSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVOYW1lIiwiaW5zdGFuY2VNZXRob2RzIiwiaXNFU01vZHVsZSIsIl9DbGFzcyIsIlJlYWxDb21wb25lbnQiLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIlJlYWN0IiwiU3VwZXJDbGFzcyIsIkNvbXBvbmVudCIsIm5hbWUiLCJkaXNwbGF5TmFtZSIsInJlbmRlciIsIm5hbWVXaXRob3V0UHJlZml4IiwicmVwbGFjZSIsIl9TdXBlckNsYXNzIiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJfdGhpcyIsInByb3BzIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVmYXVsdFByb3BzIiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwidW5kZWZpbmVkIiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJjbGFzc1N0YXRpYyJdLCJzb3VyY2VzIjpbIm1vY2tDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gKG1vZHVsZU5hbWUsIGluc3RhbmNlTWV0aG9kcywgaXNFU01vZHVsZSkgPT4ge1xuICBjb25zdCBSZWFsQ29tcG9uZW50ID0gaXNFU01vZHVsZVxuICAgID8gamVzdC5yZXF1aXJlQWN0dWFsKG1vZHVsZU5hbWUpLmRlZmF1bHRcbiAgICA6IGplc3QucmVxdWlyZUFjdHVhbChtb2R1bGVOYW1lKTtcbiAgY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG4gIGNvbnN0IFN1cGVyQ2xhc3MgPVxuICAgIHR5cGVvZiBSZWFsQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nID8gUmVhbENvbXBvbmVudCA6IFJlYWN0LkNvbXBvbmVudDtcblxuICBjb25zdCBuYW1lID1cbiAgICBSZWFsQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8XG4gICAgUmVhbENvbXBvbmVudC5uYW1lIHx8XG4gICAgKFJlYWxDb21wb25lbnQucmVuZGVyIC8vIGhhbmRsZSBSZWFjdC5mb3J3YXJkUmVmXG4gICAgICA/IFJlYWxDb21wb25lbnQucmVuZGVyLmRpc3BsYXlOYW1lIHx8IFJlYWxDb21wb25lbnQucmVuZGVyLm5hbWVcbiAgICAgIDogJ1Vua25vd24nKTtcblxuICBjb25zdCBuYW1lV2l0aG91dFByZWZpeCA9IG5hbWUucmVwbGFjZSgvXihSQ1R8UkspLywgJycpO1xuXG4gIGNvbnN0IENvbXBvbmVudCA9IGNsYXNzIGV4dGVuZHMgU3VwZXJDbGFzcyB7XG4gICAgc3RhdGljIGRpc3BsYXlOYW1lID0gJ0NvbXBvbmVudCc7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIFJlYWxDb21wb25lbnQuZGVmYXVsdFByb3BzKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAvLyBXZSBjYW4ndCBqdXN0IGFzc2lnbiBwcm9wcyBvbiB0b3Agb2YgZGVmYXVsdFByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSBSZWFjdCB0cmVhdHMgdW5kZWZpbmVkIGFzIHNwZWNpYWwgYW5kIGRpZmZlcmVudCBmcm9tIG51bGwuXG4gICAgICAgICAgLy8gSWYgYSBwcm9wIGlzIHNwZWNpZmllZCBidXQgc2V0IHRvIHVuZGVmaW5lZCBpdCBpcyBpZ25vcmVkIGFuZCB0aGVcbiAgICAgICAgICAvLyBkZWZhdWx0IHByb3AgaXMgdXNlZCBpbnN0ZWFkLiBJZiBpdCBpcyBzZXQgdG8gbnVsbCwgdGhlbiB0aGVcbiAgICAgICAgICAvLyBudWxsIHZhbHVlIG92ZXJ3cml0ZXMgdGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHNbcHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcF0gPSB0aGlzLnByb3BzW3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KG5hbWVXaXRob3V0UHJlZml4LCBwcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb21wb25lbnQsICduYW1lJywge1xuICAgIHZhbHVlOiBuYW1lLFxuICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gIH0pO1xuXG4gIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9IG5hbWVXaXRob3V0UHJlZml4O1xuXG4gIE9iamVjdC5rZXlzKFJlYWxDb21wb25lbnQpLmZvckVhY2goY2xhc3NTdGF0aWMgPT4ge1xuICAgIENvbXBvbmVudFtjbGFzc1N0YXRpY10gPSBSZWFsQ29tcG9uZW50W2NsYXNzU3RhdGljXTtcbiAgfSk7XG5cbiAgaWYgKGluc3RhbmNlTWV0aG9kcyAhPSBudWxsKSB7XG4gICAgT2JqZWN0LmFzc2lnbihDb21wb25lbnQucHJvdG90eXBlLCBpbnN0YW5jZU1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudDtcbn07XG4iXSwibWFwcGluZ3MiOiJBQVNBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRywyQkFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksZ0JBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLFVBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFNLFdBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFdBQUFELENBQUEsT0FBQUosZ0JBQUEsQ0FBQU0sT0FBQSxFQUFBRixDQUFBLE9BQUFMLDJCQUFBLENBQUFPLE9BQUEsRUFBQUgsQ0FBQSxFQUFBSSx5QkFBQSxLQUFBQyxPQUFBLENBQUFDLFNBQUEsQ0FBQUwsQ0FBQSxFQUFBQyxDQUFBLFlBQUFMLGdCQUFBLENBQUFNLE9BQUEsRUFBQUgsQ0FBQSxFQUFBTyxXQUFBLElBQUFOLENBQUEsQ0FBQU8sS0FBQSxDQUFBUixDQUFBLEVBQUFFLENBQUE7QUFBQSxTQUFBRSwwQkFBQSxjQUFBSixDQUFBLElBQUFTLE9BQUEsQ0FBQUMsU0FBQSxDQUFBQyxPQUFBLENBQUFDLElBQUEsQ0FBQVAsT0FBQSxDQUFBQyxTQUFBLENBQUFHLE9BQUEsaUNBQUFULENBQUEsYUFBQUkseUJBQUEsWUFBQUEsMEJBQUEsYUFBQUosQ0FBQTtBQUViYSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFDQyxVQUFV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